/* eslint-disable @typescript-eslint/restrict-template-expressions */
/* eslint-disable class-methods-use-this */
/* eslint-disable max-len */
import { TaskOptions } from "../../types/types";
import Agility from "../skills/agility";
import store, { task } from "../../redux-stuff";
import { SkillNames } from "../data";
import Requirements from "./Requirements";
import RewardBuilder from "../../model/RewardBuilder";

interface LapOptions {
  playerID: string;
  name: string;
  amount: number
}
export class Laps {
  private playerID: string;
  private name: string;
  private amount: number;
  private playerName: string;

  constructor({ playerID, name, amount }: LapOptions) {
    this.playerID = playerID;
    this.name = name;
    this.amount = amount;
    this.playerName = store.getState().characters.names[playerID];
  }

  start = ():void => {
    const {
      playerID, name, amount, playerName,
    } = this;

    const selectedCourse: TaskOptions | undefined = Agility.courses.find((course) => course.name === name);
    if (!selectedCourse) {
      console.log("Course not found");
      return;
    }

    const {
      name: courseName, requirements, rewards, duration: lapTime,
    } = selectedCourse;

    const doesPlayer = new Requirements(playerID, requirements);

    if (!doesPlayer.haveReqs()) {
      console.log(`${playerName} sucks and misses reqs, course: ${courseName}`);
      return;
    }

    console.log(`${playerName} wants to do ${amount}x laps of course: ${courseName}`);
    console.log(`It will take ${lapTime * amount} seconds`);
    console.log(`The reward will be something ${SkillNames.agility} exp`);

    const duration = amount * lapTime * 100; // TODO should be 1000

    const reward = new RewardBuilder(rewards).amount(amount);
    const skill = SkillNames.agility;
    const type = "Agility-Laps";
    const info = {
      name: courseName,
      amount,
    };

    const agilityTask = {
      playerID,
      duration,
      type,
      info,
      skill,
      reward,
    };

    store.dispatch(task(agilityTask));
  };
}
